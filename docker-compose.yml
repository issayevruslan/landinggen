version: "3.9"

networks:
  # reuse existing NPM network (actual name: npm_web)
  web:
    external:
      name: npm_web
  # private network for stateful services
  core:
    external: false

volumes:
  pg_data:
  redis_data:

services:
  # ---------- Postgres ----------
  db:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks: [core]
    restart: unless-stopped

  # ---------- Redis ----------
  redis:
    image: redis:7-alpine
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 10
    volumes:
      - redis_data:/data
    networks: [core]
    restart: unless-stopped

  # ---------- Static Assets (public, read-only) ----------
  assets:
    image: nginx:alpine
    volumes:
      - ./storage/public:/usr/share/nginx/html:ro
      - ./apps/assets/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    networks:
      web:
        ipv4_address: 192.168.11.186
    restart: unless-stopped

  # ---------- Admin UI ----------
  studio:
    build: ./apps/studio
    environment:
      NODE_ENV: production
      HOSTNAME: 0.0.0.0
      PORT: 3000
      NEXTAUTH_URL: https://${STUDIO_HOST}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      FILE_STORAGE_ROOT: ${FILE_STORAGE_ROOT}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
      API_BASE_URL: https://${API_HOST}
      GEN_INTERNAL_URL: http://gen:3000
      PDF_INTERNAL_URL: http://pdf:3000
      API_INTERNAL_URL: http://api:3000
      NEXT_PUBLIC_GA_ID: ${NEXT_PUBLIC_GA_ID}
      NEXT_PUBLIC_GTM_ID: ${NEXT_PUBLIC_GTM_ID}
    volumes:
      - ./storage:/data
    depends_on: [db, redis, api]
    networks:
      core: {}
      web:
        ipv4_address: 192.168.11.180
    restart: unless-stopped

  # ---------- API (uploads/files/webhooks) ----------
  api:
    build: ./apps/api
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      FILE_STORAGE_ROOT: ${FILE_STORAGE_ROOT}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
      JWT_SECRET: ${JWT_SECRET}
      CORS_ORIGINS: https://${STUDIO_HOST},https://${LP_HOST},https://${ASSETS_HOST}
    volumes:
      - ./storage:/data
    depends_on: [db, redis]
    networks:
      core: {}
      web:
        ipv4_address: 192.168.11.181
    restart: unless-stopped

  # ---------- Orchestrator ----------
  gen:
    build: ./apps/gen
    environment:
      NODE_ENV: production
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      FILE_STORAGE_ROOT: ${FILE_STORAGE_ROOT}
      ENCRYPTION_KEY: ${ENCRYPTION_KEY}
      API_BASE_URL: https://${API_HOST}
    volumes:
      - ./storage:/data
    depends_on: [db, redis, api]
    networks:
      core: {}
      web:
        ipv4_address: 192.168.11.182
    restart: unless-stopped

  # ---------- Landing Page Runtime ----------
  lp:
    build: ./apps/lp-runtime
    environment:
      NODE_ENV: production
      HOSTNAME: 0.0.0.0
      PORT: 3000
      API_INTERNAL_URL: http://api:3000
      TRACK_INTERNAL_URL: http://track:3000
      NEXT_PUBLIC_GA_ID: ${NEXT_PUBLIC_GA_ID}
      NEXT_PUBLIC_GTM_ID: ${NEXT_PUBLIC_GTM_ID}
      DATABASE_URL: ${DATABASE_URL}
      REDIS_URL: ${REDIS_URL}
      FILE_STORAGE_ROOT: ${FILE_STORAGE_ROOT}
      ORIGIN_HOST: ${LP_HOST}
      PUBLIC_BASE_URL: ${PUBLIC_BASE_URL}
    volumes:
      - ./storage:/data
    depends_on: [db, redis]
    networks:
      core: {}
      web:
        ipv4_address: 192.168.11.183
    restart: unless-stopped

  # ---------- Event Collector (optional) ----------
  track:
    build: ./apps/track
    environment:
      NODE_ENV: production
      DATABASE_URL: ${DATABASE_URL}
    depends_on: [db]
    networks:
      core: {}
      web:
        ipv4_address: 192.168.11.184
    restart: unless-stopped

  # ---------- PDF Renderer (headless) ----------
  pdf:
    build: ./apps/pdf
    environment:
      NODE_ENV: production
      FILE_STORAGE_ROOT: ${FILE_STORAGE_ROOT}
    volumes:
      - ./storage:/data
    networks:
      core: {}
      web:
        ipv4_address: 192.168.11.185
    restart: unless-stopped


